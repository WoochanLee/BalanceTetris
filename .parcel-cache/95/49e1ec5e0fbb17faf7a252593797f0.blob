var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "rewindTimer", function () {
  return rewindTimer;
});
var _game = require("./game");
var _settingsConfig = require("../settings/config");
let testButtonOn = false;
let timeId = null;
let currentDifficulty = 0;
let score = 0;
let levelText = document.getElementById("level");
let scoreText = document.getElementById("score");
let gameOverText = document.getElementById("game-over");
let chanImg = document.getElementById("chanImg");
let youngImg = document.getElementById("youngImg");
let isGameOver = false;
// function onClickTestButton() {
// if (testButtonOn) {
// clearInterval(timeId);
// } else {
// timeId = setInterval(
// () => gameScreen.flowGravity(),
// timePerLine * Math.pow(increaseSpeedPerDifficulty, currentDifficulty)
// );
// }
// testButtonOn = !testButtonOn;
// }
timeId = setInterval(() => _game.gameScreen.flowGravity(), _settingsConfig.timePerLine * Math.pow(_settingsConfig.increaseSpeedPerDifficulty, currentDifficulty));
function levelUp() {
  currentDifficulty++;
  levelText.textContent = `${currentDifficulty}`;
}
function rewindTimer() {
  clearInterval(timeId);
  timeId = setInterval(() => _game.gameScreen.flowGravityWithDraw(), _settingsConfig.timePerLine * Math.pow(_settingsConfig.increaseSpeedPerDifficulty, currentDifficulty));
}
function addScore(removedLineCount) {
  if (removedLineCount > 0) {
    score += removedLineCount * removedLineCount;
    scoreText.textContent = `${score}`;
  }
}
function gameOver() {
  isGameOver = true;
  clearInterval(timeId);
  gameOverText.style.visibility = "visible";
  if (score == 0) {
    makeFailEasterEgg();
  }
}
function makeFailEasterEgg() {
  chanImg.src = "res/chan_fail.png";
  youngImg.src = "res/young_fail.png";
}
